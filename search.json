[{"path":"https://heronoh.github.io/BLASTr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 BLASTr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://heronoh.github.io/BLASTr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lucio Queiroz. Author. Heron Hilario. Author, maintainer.","code":""},{"path":"https://heronoh.github.io/BLASTr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Queiroz L, Hilario H (2025). BLASTr: Parallel Taxonomic Classification Metabarcoding Sequences. R package version 0.1.5, https://github.com/heronoh/BLASTr.","code":"@Manual{,   title = {BLASTr: Parallel Taxonomic Classification of Metabarcoding Sequences},   author = {Lucio Queiroz and Heron Hilario},   year = {2025},   note = {R package version 0.1.5},   url = {https://github.com/heronoh/BLASTr}, }"},{"path":[]},{"path":"https://heronoh.github.io/BLASTr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Parallel Taxonomic Classification of Metabarcoding Sequences","text":"BLASTr R package seamlessly integrates BLAST+ searches R workflow. specifically designed analysis Amplicon Sequence Variants (ASVs) metabarcoding metagenomic studies. BLASTr, can efficiently perform taxonomic classification sequences leveraging power parallel processing automated dependency management.","code":""},{"path":"https://heronoh.github.io/BLASTr/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Parallel Taxonomic Classification of Metabarcoding Sequences","text":"Parallel BLAST Searches: Run multiple BLAST searches concurrently significantly speed analysis. Automated Dependency Management: BLASTr automatically installs manages BLAST+ Entrez Direct dependencies using condathis, ensuring hassle-free setup. Taxonomic Classification: Retrieve detailed taxonomic information sequences using NCBI Taxonomy IDs. Flexible Easy Use: package provides set intuitive functions simplify process running thousands BLAST searches handling results. Reproducible Research: managing dependencies isolated Conda environments, BLASTr helps ensure analyses reproducible.","code":""},{"path":"https://heronoh.github.io/BLASTr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Parallel Taxonomic Classification of Metabarcoding Sequences","text":"can install development version BLASTr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"heronoh/BLASTr\")"},{"path":"https://heronoh.github.io/BLASTr/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Parallel Taxonomic Classification of Metabarcoding Sequences","text":"’s simple example use BLASTr perform BLAST search retrieve taxonomic information:","code":"library(BLASTr)  # First, make sure you have the necessary dependencies installed install_dependencies()  # A vector of ASV sequences asvs <- c(   \"CTAGCCATAAACTTAAATGAAGCTATACTAAACTCGTTCGCCAGAGTACTACAAGCGAAAGCTTAAAACTCATAGGACTTGGCGGTGTTTCAGACCCAC\",   \"CTAGCCATAAACTTAAATGAAGCTATACTAAACTCGTTCGCCAGAGTACTACAAGTGAAAGCTTAAAACTCATAGGACTTGGCGGTGTTTCAGACCCAC\",   \"GCCAAATTTGTGTTTTGTCCTTCGTTTTTAGTTAATTGTTACTGGCAAATGACTAACGACAAATGATAAATTACTAATAC\",   \"AACATTGTATTTTGTCTTTGGGGCCTGGGCAGGTGCAGTAGGAACTTCACTTAGAATAATTATTCGTACTGAGCTTGGGCATCCAGGAAGACTTATCGGGGATGATCAAATCTATAATGTAATTGTTACAGCACATGCATTTGTGATAATTTTTTTTATAGTAATACCTATTATGATT\",   \"ACTATACCTATTATTCGGCGCATGAGCTGGAGTCCTAGGCACAGCTCTAAGCCTCCTTATTCGAGCCGAGCTGGGCCAGCCAGGCAACCTTCTAGGTAACGACCACATCTACAACGTTATCGTCACAGCCCATGCATTTGTAATAATCTTCTTCATAGTAATACCCATCATAATCGGAGGCTTTGGCAACTGACTAGTTCCCCTAATAATCGGTGCCCCCGATATG\",   \"TTAGCCATAAACATAAAAGTTCACATAACAAGAACTTTTGCCCGAGAACTACTAGCAACAGCTTAAAACTCAAAGGACTTGGCGGTGCTTTATATCCAC\" )  # Path to your local FASTA database fasta_path <- fs::path_package(\"BLASTr\", \"extdata\", \"minimal_db_blast\", ext = \"fasta\")  # Path to database db_path <- fs::path_temp(\"minimal_db_blast\")  make_blast_db(   fasta_path = fasta_path,   db_path = db_path,   db_type = \"nucl\" )  head(readLines(fasta_path)) #> [1] \">AP011979.1 Gymnotus carapo mitochondrial DNA, almost complete genome\" #> [2] \"TACAAACTGGGATTAGATACCCCACTATGCCTAGCCATAAACTTAAATGAAACTATACTAAACTCATTCGCCAGAGTACT\" #> [3] \"ACAAGCGAAAGCTTAAAACTCAAAGGACTTGGCGGTGTTTCAGACCCAC\" #> [4] \">CP030121.1 Brasilonema octagenarum UFV-E1 chromosome\" #> [5] \"TAGCTCCCGTCGAGTCTCTGCACCTTCCGCATTAGTCATTTATCATTTGTCGTTAGTCATTTGCTAGTAACAATTAACTA\" #> [6] \"AAAACGAAGGACAAAAGACAAATTTGGC\"  file.exists(paste0(db_path, \".ndb\")) #> [1] TRUE # Run BLAST in parallel blast_results <- parallel_blast(   asvs = asvs,   db_path = db_path,   total_cores = 2 # Number of cores to use )  # Extract the taxonomy IDs from the BLAST results tax_ids <- blast_results$`1_staxid`  # Retrieve taxonomic information in parallel taxonomic_info <- parallel_get_tax(   organisms_taxIDs = tax_ids,   total_cores = 2,   retry_times = 0 ) #> retrying 0 of 0 #> ------------------------> unable to retrieve taxonomy for: N/A #> ------------------------> unable to retrieve taxonomy for: NA #> The following taxIDs could not be retrieved even after 0 attempts: #> N/AThe following taxIDs could not be retrieved even after 0 attempts: #> NA # View the results print(blast_results) #> # A tibble: 6 × 57 #>   Sequence               `1_subject header` `1_subject` `1_indentity` `1_length` #>   <chr>                  <chr>              <chr>               <dbl>      <dbl> #> 1 CTAGCCATAAACTTAAATGAA… \"Gymnotus carapo … AP011979.1           97.0         99 #> 2 CTAGCCATAAACTTAAATGAA…  <NA>              <NA>                 NA           NA #> 3 GCCAAATTTGTGTTTTGTCCT… \"Brasilonema octa… CP030121.1           96.2         78 #> 4 AACATTGTATTTTGTCTTTGG… \"Symphoromyia cra… MG967958.1           84.9        179 #> 5 ACTATACCTATTATTCGGCGC… \"Homo sapiens iso… MN849868.1          100          226 #> 6 TTAGCCATAAACATAAAAGTT… \"Hydrochoerus hyd… KX381515.1           99.0         99 #> # ℹ 52 more variables: `1_mismatches` <dbl>, `1_gaps` <dbl>, #> #   `1_query start` <dbl>, `1_query end` <dbl>, `1_subject start` <dbl>, #> #   `1_subject end` <dbl>, `1_e-value` <dbl>, `1_bitscore` <dbl>, #> #   `1_qcovhsp` <dbl>, `1_staxid` <chr>, `2_subject header` <chr>, #> #   `2_subject` <chr>, `2_indentity` <dbl>, `2_length` <dbl>, #> #   `2_mismatches` <dbl>, `2_gaps` <dbl>, `2_query start` <dbl>, #> #   `2_query end` <dbl>, `2_subject start` <dbl>, `2_subject end` <dbl>, … print(taxonomic_info) #> # A tibble: 0 × 13 #> # ℹ 13 variables: Sci_name <chr>, query_taxID <chr>, Superkingdom (NCBI) <chr>, #> #   Kingdom (NCBI) <chr>, Phylum (NCBI) <chr>, Subphylum (NCBI) <chr>, #> #   Class (NCBI) <chr>, Subclass (NCBI) <chr>, Order (NCBI) <chr>, #> #   Suborder (NCBI) <chr>, Family (NCBI) <chr>, Subfamily (NCBI) <chr>, #> #   Genus (NCBI) <chr>"},{"path":"https://heronoh.github.io/BLASTr/index.html","id":"main-functions","dir":"","previous_headings":"","what":"Main Functions","title":"Parallel Taxonomic Classification of Metabarcoding Sequences","text":"install_dependencies(): Installs BLAST+ Entrez Direct found system. make_blast_db(): Creates BLAST database FASTA file. parallel_blast(): Runs BLAST searches multiple sequences parallel. get_blast_results(): Runs BLAST search single sequence. parallel_get_tax(): Retrieves taxonomic information multiple NCBI Taxonomy IDs parallel. get_tax_by_taxID(): Retrieves taxonomic information single NCBI Taxonomy ID. run_blast(): lower-level function run BLAST search return raw output. parse_fasta(): Extracts sequences FASTA file. get_fasta_header(): Retrieves full header sequence BLAST database.","code":""},{"path":"https://heronoh.github.io/BLASTr/index.html","id":"dependency-management","dir":"","previous_headings":"","what":"Dependency Management","title":"Parallel Taxonomic Classification of Metabarcoding Sequences","text":"BLASTr uses condathis package manage dependencies (BLAST+ Entrez Direct). run function requires one tools, BLASTr automatically check ’s installed. , create Conda environment install necessary software. ensures always correct versions dependencies without install manually. can control installation process force verbose arguments install_dependencies() check_cmd() functions.","code":""},{"path":"https://heronoh.github.io/BLASTr/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Parallel Taxonomic Classification of Metabarcoding Sequences","text":"Contributions welcome! Please see contributing guide details.","code":""},{"path":"https://heronoh.github.io/BLASTr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Parallel Taxonomic Classification of Metabarcoding Sequences","text":"project licensed MIT License - see LICENSE file details.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/BLASTr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"BLASTr: Parallel Taxonomic Classification of Metabarcoding Sequences — BLASTr-package","title":"BLASTr: Parallel Taxonomic Classification of Metabarcoding Sequences — BLASTr-package","text":"Seamlessly run 'BLAST' searches within 'R', tailored ASV (Amplicon Sequence Variant) analysis. package offers robust set functions designed efficiently identify process sequences high-throughput metagenomicmetagenomic experiments, following best practices sequence data analysis.","code":""},{"path":[]},{"path":"https://heronoh.github.io/BLASTr/reference/BLASTr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"BLASTr: Parallel Taxonomic Classification of Metabarcoding Sequences — BLASTr-package","text":"Maintainer: Heron Hilario heronoh@gmail.com (ORCID) Authors: Lucio Queiroz luciorqueiroz@gmail.com (ORCID)","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/check_cmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if a Command is Available and Install if Necessary — check_cmd","title":"Determine if a Command is Available and Install if Necessary — check_cmd","text":"Checks specified command-line tool ('blastn' 'efetch') available system. , creates conda environment installs required tool.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/check_cmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if a Command is Available and Install if Necessary — check_cmd","text":"","code":"check_cmd(   cmd = \"blastn\",   env_name = \"blastr-blast-env\",   verbose = \"silent\",   force = FALSE )"},{"path":"https://heronoh.github.io/BLASTr/reference/check_cmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if a Command is Available and Install if Necessary — check_cmd","text":"cmd Character string specifying command-line tool check . Supported commands \"blastn\" \"efetch\". Default \"blastn\". env_name Character string specifying name conda environment create use. Default \"blastr-blast-env\". verbose Character string specifying verbosity level environment creation. Options \"silent\", \"verbose\", etc. Default \"silent\". force Logical indicating whether force re-creation conda environment even exists. Default FALSE.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/check_cmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if a Command is Available and Install if Necessary — check_cmd","text":"Invisibly returns TRUE command available successfully installed.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/check_cmd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if a Command is Available and Install if Necessary — check_cmd","text":"","code":"if (FALSE) { # \\dontrun{ # Check if 'blastn' command is available, and install it if not check_cmd(\"blastn\", env_name = \"blastr-blast-env\")  # Check if 'efetch' command is available, and install it if not check_cmd(\"efetch\", env_name = \"blastr-entrez-env\")  # Force re-creation of the conda environment and re-install 'blastn' check_cmd(\"blastn\", env_name = \"blastr-blast-env\", force = TRUE) } # }"},{"path":"https://heronoh.github.io/BLASTr/reference/get_blast_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Run BLASTn — get_blast_results","title":"Run BLASTn — get_blast_results","text":"Retrieve BLAST results given ASV","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/get_blast_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run BLASTn — get_blast_results","text":"","code":"get_blast_results(   asv,   db_path,   num_threads = 1L,   blast_type = \"blastn\",   perc_id = 80L,   perc_qcov_hsp = 80L,   num_alignments = 4L,   verbose = FALSE,   env_name = \"blastr-blast-env\" )"},{"path":"https://heronoh.github.io/BLASTr/reference/get_blast_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run BLASTn — get_blast_results","text":"asv Vector sequences BLASTed. db_path Complete path formatted BLAST database. num_threads Number threads run BLAST . Passed BLAST+ argument -num_threads. blast_type One available BLAST+ search engines, #'   one : c(\"blastn\", \"blastp\", \"blastx\", \"tblastn\", \"tblastx\"). perc_id Lowest identity percentage cutoff. Passed BLAST+ -perc_identity. perc_qcov_hsp Lowest query coverage per HSP percentage cutoff. Passed BLAST+ -qcov_hsp_perc. num_alignments Number alignments retrieve BLAST. Max = 6. verbose condathis::run() internal command shown? env_name name conda environment parameter (.e. \"blastr-blast-env\")","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/get_blast_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run BLASTn — get_blast_results","text":"tibble results BLASTn sequence.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/get_blast_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run BLASTn — get_blast_results","text":"","code":"if (FALSE) { # \\dontrun{ blast_res <- BLASTr::get_blast_results(   asv = \"CTAGCCATAAACTTAAATGAAGCTATACTAAACTCGTTCGCCAGAGTA   CTACAAGCGAAAGCTTAAAACTCATAGGACTTGGCGGTGTTTCAGACCCAC\",   db_path = \"/data/databases/nt/nt\",   perc_id = 80,   num_thread = 1,   perc_qcov_hsp = 80,   num_alignments = 2 ) } # }"},{"path":"https://heronoh.github.io/BLASTr/reference/get_fasta_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Get header from SubjectID — get_fasta_header","title":"Get header from SubjectID — get_fasta_header","text":"Retrieve complete sequence header BLAST DB based SubjectIDs","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/get_fasta_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get header from SubjectID — get_fasta_header","text":"","code":"get_fasta_header(id, db_path, env_name = \"blastr-blast-env\", verbose = FALSE)"},{"path":"https://heronoh.github.io/BLASTr/reference/get_fasta_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get header from SubjectID — get_fasta_header","text":"id SubjectID BLAST results NCBI Nucleotide identifier. db_path Complete path formatted BLAST database. env_name name conda environment parameter (.e. \"blastr-blast-env\") verbose condathis::run() internal command shown?","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/get_fasta_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get header from SubjectID — get_fasta_header","text":"Complete identifier SubjectID database.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/get_fasta_header.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get header from SubjectID — get_fasta_header","text":"","code":"if (FALSE) { # \\dontrun{ BLASTr::get_fasta_header(id = \"AP011979.1\", db_path = \"/data/databases/nt/nt\") } # }"},{"path":"https://heronoh.github.io/BLASTr/reference/get_tax_by_taxID.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Taxonomic Ranks Using NCBI Taxonomy Tax IDs — get_tax_by_taxID","title":"Retrieve Taxonomic Ranks Using NCBI Taxonomy Tax IDs — get_tax_by_taxID","text":"Retrieves complete taxonomy information given NCBI Taxonomy Tax IDs querying NCBI database using efetch command.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/get_tax_by_taxID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Taxonomic Ranks Using NCBI Taxonomy Tax IDs — get_tax_by_taxID","text":"","code":"get_tax_by_taxID(   organisms_taxIDs,   parse_result = TRUE,   verbose = FALSE,   env_name = \"blastr-entrez-env\" )"},{"path":"https://heronoh.github.io/BLASTr/reference/get_tax_by_taxID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Taxonomic Ranks Using NCBI Taxonomy Tax IDs — get_tax_by_taxID","text":"organisms_taxIDs character vector NCBI Taxonomy Tax IDs retrieve taxonomy information. parse_result Logical indicating whether parse taxonomy information tibble (TRUE, default) return raw output returned efetch (FALSE). verbose Logical indicating whether print verbose messages process. Default FALSE. env_name Character string specifying name conda environment efetch installed. Default \"blastr-entrez-env\".","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/get_tax_by_taxID.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Taxonomic Ranks Using NCBI Taxonomy Tax IDs — get_tax_by_taxID","text":"tibble containing taxonomic ranks given Tax IDs.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/get_tax_by_taxID.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Taxonomic Ranks Using NCBI Taxonomy Tax IDs — get_tax_by_taxID","text":"","code":"if (FALSE) { # \\dontrun{ # Retrieve taxonomy for a single Tax ID tax_info <- get_tax_by_taxID(\"9606\") # Human  # Retrieve taxonomy for multiple Tax IDs tax_ids <- c(\"9606\", \"10090\", \"10116\") # Human, Mouse, Rat tax_info <- get_tax_by_taxID(tax_ids)  # Get unparsed taxonomy result raw_tax_info <- get_tax_by_taxID(\"9606\", parse_result = FALSE)  # Enable verbose output tax_info <- get_tax_by_taxid(\"9606\", verbose = TRUE) } # }"},{"path":"https://heronoh.github.io/BLASTr/reference/install_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Install Required Command-line Tool Dependencies — install_dependencies","title":"Install Required Command-line Tool Dependencies — install_dependencies","text":"Installs necessary command-line tools ('blast' 'efetch') conda environments already available. ensures dependencies required package present --date.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/install_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install Required Command-line Tool Dependencies — install_dependencies","text":"","code":"install_dependencies(verbose = \"silent\", force = FALSE)"},{"path":"https://heronoh.github.io/BLASTr/reference/install_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install Required Command-line Tool Dependencies — install_dependencies","text":"verbose character string specifying verbosity level environment creation. Options include \"silent\", \"output\", \"full\" etc. Default \"silent\". force logical value indicating whether force re-creation Conda environments even already exist. Default FALSE.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/install_dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install Required Command-line Tool Dependencies — install_dependencies","text":"Invisibly returns TRUE attempting install dependencies.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/install_dependencies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install Required Command-line Tool Dependencies — install_dependencies","text":"","code":"if (FALSE) { # \\dontrun{ # Install dependencies with default settings install_dependencies()  # Install dependencies with verbose output install_dependencies(verbose = \"verbose\")  # Force re-installation of dependencies install_dependencies(force = TRUE) } # }"},{"path":"https://heronoh.github.io/BLASTr/reference/make_blast_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Make BLAST Database — make_blast_db","title":"Make BLAST Database — make_blast_db","text":"Create BLAST database FASTA file.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/make_blast_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make BLAST Database — make_blast_db","text":"","code":"make_blast_db(   fasta_path,   db_path,   db_type = \"nucl\",   taxid_map = NULL,   parse_seqids = TRUE,   verbose = FALSE,   env_name = \"blastr-blast-env\" )"},{"path":"https://heronoh.github.io/BLASTr/reference/make_blast_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make BLAST Database — make_blast_db","text":"fasta_path Path input FASTA file. db_path Path output BLAST database. db_type Type database create, either \"nucl\" \"prot\". taxid_map Optional path file mapping sequence IDs taxonomy IDs. parse_seqids Whether parse sequence IDs. verbose condathis::run() internal command shown? env_name name conda environment parameter (.e. \"blastr-blast-env\")","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/make_blast_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make BLAST Database — make_blast_db","text":"result makeblastdb command.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/make_blast_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make BLAST Database — make_blast_db","text":"","code":"if (FALSE) { # \\dontrun{ make_blast_db(   fasta_path = fs::path_package(     \"BLASTr\", \"extdata\", \"minimal_db_blast\",     ext = \"fasta\"   ),   db_path = fs::path_temp(\"minimal_db_blast\"),   db_type = \"nucl\" ) } # }"},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_blast.html","id":null,"dir":"Reference","previous_headings":"","what":"Run BLAST on parallel — parallel_blast","title":"Run BLAST on parallel — parallel_blast","text":"Run parallel BLAST set sequences","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_blast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run BLAST on parallel — parallel_blast","text":"","code":"parallel_blast(   asvs,   db_path,   out_file = NULL,   out_RDS = NULL,   num_threads = 1L,   blast_type = \"blastn\",   total_cores = 1L,   perc_id = 80L,   perc_qcov_hsp = 80L,   num_alignments = 4L,   verbose = FALSE,   env_name = \"blastr-blast-env\" )"},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_blast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run BLAST on parallel — parallel_blast","text":"asvs Character vector sequences db_path Complete path formatted BLAST database. out_file Complete path output .csv file existing folder. out_RDS Complete path output RDS file existing folder. num_threads Number threads run BLAST . Passed BLAST+ argument -num_threads. blast_type BLAST+ executable used search. total_cores Total available cores run BLAST parallel. Check max future::availableCores() perc_id Lowest identity percentage cutoff. Passed BLAST+ -perc_identity. perc_qcov_hsp Lowest query coverage per HSP percentage cutoff. Passed BLAST+ -qcov_hsp_perc. num_alignments Number alignments retrieve BLAST. Max = 6. verbose condathis::run() internal command shown? env_name name conda environment parameter (.e. \"blastr-blast-env\")","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_blast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run BLAST on parallel — parallel_blast","text":"tibble BLAST tabular output.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_blast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run BLAST on parallel — parallel_blast","text":"","code":"if (FALSE) { # \\dontrun{ blast_res <- BLASTr::parallel_blast(   asvs = ASVs_test, # vector of sequences to be searched   db_path = \"/data/databases/nt/nt\", # path to a formatted blast database   out_file = NULL, # path to a .csv file to be created with results (on an existing folder)   out_RDS = NULL, # path to a .RDS file to be created with results (on an existing folder)   perc_id = 80, # minimum identity percentage cutoff   perc_qcov_hsp = 80, # minimum percentage coverage of query sequence by subject sequence cutoff   num_threads = 1, # number of threads/cores to run each blast on   total_cores = 8, # number of total threads/cores to allocate all blast searches   # maximum number of alignments/matches to retrieve results for each query sequence   num_alignments = 3,   blast_type = \"blastn\" # blast search engine to use ) } # }"},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_get_tax.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Taxonomic Ranks for a List of NCBI Taxonomy Tax IDs in Parallel — parallel_get_tax","title":"Retrieve Taxonomic Ranks for a List of NCBI Taxonomy Tax IDs in Parallel — parallel_get_tax","text":"Retrieves taxonomy ranks list NCBI Taxonomy Tax IDs using parallel processing. function queries NCBI database can retry fetching taxonomy information multiple times initial attempts fail.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_get_tax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Taxonomic Ranks for a List of NCBI Taxonomy Tax IDs in Parallel — parallel_get_tax","text":"","code":"parallel_get_tax(   organisms_taxIDs,   parse_result = TRUE,   total_cores = 1,   retry_times = 10,   verbose = FALSE,   env_name = \"blastr-entrez-env\" )"},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_get_tax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Taxonomic Ranks for a List of NCBI Taxonomy Tax IDs in Parallel — parallel_get_tax","text":"organisms_taxIDs character vector NCBI Taxonomy Tax IDs retrieve taxonomy information . parse_result Logical indicating whether parse taxonomy information tibble (TRUE, default) return raw output returned efetch (FALSE). total_cores Integer specifying number cores use parallel processing. Defaults 1. retry_times Integer specifying number times retry fetching taxonomy information fails. Defaults 10. verbose Logical indicating whether print verbose messages process. Default FALSE. env_name Character string specifying name conda environment efetch installed. Default \"blastr-entrez-env\".","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_get_tax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Taxonomic Ranks for a List of NCBI Taxonomy Tax IDs in Parallel — parallel_get_tax","text":"tibble containing taxonomic ranks given Tax IDs.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_get_tax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Taxonomic Ranks for a List of NCBI Taxonomy Tax IDs in Parallel — parallel_get_tax","text":"","code":"if (FALSE) { # \\dontrun{ # Retrieve taxonomy for multiple Tax IDs using 4 cores tax_ids <- c(\"9606\", \"10090\", \"10116\") # Human, Mouse, Rat tax_info <- parallel_get_tax(tax_ids, total_cores = 4)  # Retrieve unparsed taxonomy result tax_info_unparsed <- parallel_get_tax(tax_ids, parse_result = FALSE)  # Increase the number of retry attempts tax_info <- parallel_get_tax(tax_ids, retry_times = 20)  # Enable verbose output tax_info <- parallel_get_tax(tax_ids, verbose = TRUE) } # }"},{"path":"https://heronoh.github.io/BLASTr/reference/parse_fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Parsing fasta file to sequences only — parse_fasta","title":"Parsing fasta file to sequences only — parse_fasta","text":"Extract sequences FASTA file","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/parse_fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parsing fasta file to sequences only — parse_fasta","text":"","code":"parse_fasta(file_path)"},{"path":"https://heronoh.github.io/BLASTr/reference/parse_fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parsing fasta file to sequences only — parse_fasta","text":"file_path Path FASTA file.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/parse_fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parsing fasta file to sequences only — parse_fasta","text":"vector containing sequences.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/run_blast.html","id":null,"dir":"Reference","previous_headings":"","what":"Run BLAST — run_blast","title":"Run BLAST — run_blast","text":"Run BLAST single sequence return raw results. formatted results, use function BLASTr::get_blastn_results()","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/run_blast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run BLAST — run_blast","text":"","code":"run_blast(   asv,   db_path,   num_alignments = 4L,   num_threads = 1L,   blast_type = \"blastn\",   perc_id = 80L,   perc_qcov_hsp = 80L,   verbose = FALSE,   env_name = \"blastr-blast-env\" )"},{"path":"https://heronoh.github.io/BLASTr/reference/run_blast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run BLAST — run_blast","text":"asv Vector sequences BLASTed. db_path Complete path formatted BLAST database. num_alignments Number alignments retrieve BLAST. Max = 6. num_threads Number threads run BLAST . Passed BLAST+ argument -num_threads. blast_type One available BLAST+ search engines, #'   one : c(\"blastn\", \"blastp\", \"blastx\", \"tblastn\", \"tblastx\"). perc_id Lowest identity percentage cutoff. Passed BLAST+ -perc_identity. perc_qcov_hsp Lowest query coverage per HSP percentage cutoff. Passed BLAST+ -qcov_hsp_perc. verbose condathis::run() internal command shown? env_name name conda environment parameter (.e. \"blastr-blast-env\")","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/run_blast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run BLAST — run_blast","text":"Unformatted BLAST results. results formatted tibble, please use BLASTr::get_blast_results()","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/run_blast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run BLAST — run_blast","text":"","code":"if (FALSE) { # \\dontrun{ blast_res <- run_blast(   asv = \"CTAGCCATAAACTTAAATGAAGCTATACTAAACTCGTTCGCCAG     AGTACTACAAGCGAAAGCTTAAAACTCATAGGACTTGGCGGTGTTTCAGACCCAC\",   db_path = fs::path_package(\"BLASTr\", \"extdata\", \"minimal_db_blast\", ext = \"fasta\"),   perc_id = 80,   num_thread = 1,   perc_qcov_hsp = 80,   num_alignments = 2 ) } # }"},{"path":[]},{"path":"https://heronoh.github.io/BLASTr/news/index.html","id":"breaking-changes-0-1-5","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"BLASTr 0.1.5 2025-08-27","text":"internal environments used BLASTr renamed blastr-blast-env blastr-entrez-env. Remove furrr based functions favor new purrr native parallel. options() based parameters removed favor explicit arguments functions.","code":""},{"path":"https://heronoh.github.io/BLASTr/news/index.html","id":"new-features-0-1-5","dir":"Changelog","previous_headings":"Breaking Changes","what":"New features","title":"BLASTr 0.1.5 2025-08-27","text":"New parallel framework based native purrr functions, using mirai carrier background. New make_blast_db() function create custom BLAST databases.","code":""},{"path":"https://heronoh.github.io/BLASTr/news/index.html","id":"minor-improvements-and-fixes-0-1-5","dir":"Changelog","previous_headings":"Breaking Changes","what":"Minor improvements and fixes","title":"BLASTr 0.1.5 2025-08-27","text":"Internal entrez-direct version bump 24.0.","code":""},{"path":"https://heronoh.github.io/BLASTr/news/index.html","id":"blastr-013","dir":"Changelog","previous_headings":"","what":"BLASTr 0.1.3","title":"BLASTr 0.1.3","text":"Refactor handling internal errors. shell_exec available anymore.","code":""},{"path":"https://heronoh.github.io/BLASTr/news/index.html","id":"blastr-012","dir":"Changelog","previous_headings":"","what":"BLASTr 0.1.2","title":"BLASTr 0.1.2","text":"New install_dependencies() automatically create environments. Initial support condathis managing dependency installation.","code":""}]
