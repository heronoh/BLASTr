[{"path":"https://heronoh.github.io/BLASTr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 BLASTr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://heronoh.github.io/BLASTr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lucio Queiroz. Author. Heron Hilario. Author, maintainer.","code":""},{"path":"https://heronoh.github.io/BLASTr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Queiroz L, Hilario H (2024). BLASTr: Parallel Taxonomic Classification Metabarcoding Sequences. R package version 0.1.4, https://heronoh.github.io/BLASTr/, https://github.com/heronoh/BLASTr.","code":"@Manual{,   title = {BLASTr: Parallel Taxonomic Classification of Metabarcoding Sequences},   author = {Lucio Queiroz and Heron Hilario},   year = {2024},   note = {R package version 0.1.4, https://heronoh.github.io/BLASTr/},   url = {https://github.com/heronoh/BLASTr}, }"},{"path":"https://heronoh.github.io/BLASTr/index.html","id":"blastr","dir":"","previous_headings":"","what":"Parallel Taxonomic Classification of Metabarcoding Sequences","title":"Parallel Taxonomic Classification of Metabarcoding Sequences","text":"R package parallel taxonomic classification metabarcoding sequences. BLASTr package powerful tool performing BLAST operations within R environment. Despite initially developed metagenomic applications, BLASTr package flexible applications. can used installed NCBI BLAST+ search strategy, configuration, database UNIX Windows platforms Windows Subsystem Linux. makes versatile tool can used various applications contexts requiring sequence identification tabular outputs. Additionally, package includes documentation functions parsing analyzing results BLAST searches, making easier users extract useful information BLAST results. Overall, BLASTr package valuable tool bioinformaticians researchers need perform BLAST operations within R.","code":""},{"path":"https://heronoh.github.io/BLASTr/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Parallel Taxonomic Classification of Metabarcoding Sequences","text":"BLASTr package requires NCBI BLAST+ installed. easiest way perform installation UNIX command line.","code":"#install NCBI-BLAST+  sudo apt update sudo apt install ncbi-blast+  #chech installation using one of its applicaitons blastn -help  # identify the executable complete path which blastn"},{"path":[]},{"path":"https://heronoh.github.io/BLASTr/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development version","title":"Parallel Taxonomic Classification of Metabarcoding Sequences","text":"can install development version BLASTr GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"heronoh/BLASTr\")"},{"path":"https://heronoh.github.io/BLASTr/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Parallel Taxonomic Classification of Metabarcoding Sequences","text":"main place look help documentation <heronoh.github.io/BLASTr/>","code":""},{"path":[]},{"path":"https://heronoh.github.io/BLASTr/index.html","id":"obtaining-ncbi-complete-databases","dir":"","previous_headings":"Database configuration","what":"Obtaining NCBI complete databases","title":"Parallel Taxonomic Classification of Metabarcoding Sequences","text":"Identifications can performed using NCBI complete databases, NT, readily available download update. can performed using BLAST+ script update_blastdb.pl. Another option download directly fom NCBI ftp site. can parallelized best choice want download new files.","code":"#set a folder to download the desired database (for example, the nt database) BLAST_DB_PATH=\"/data/database/blast/nt\"  #create dir mkdir -p  \"${BLAST_DB_PATH}\"  #enter dir cd \"${BLAST_DB_PATH}\"  #suggestion: use screen or tmux to emulate a terminal. The downloads usually takes long. #          tmux: https://tmuxcheatsheet.com/ #          screen: https://kapeli.com/cheat_sheets/screen.docset/Contents/Resources/Documents/index  #user BLAST+ executable to download/update db files update_blastdb --passive --decompress nt  #set permissions to enable usage by all users chown root \"${BLAST_DB_PATH}\"/* chmod 755 \"${BLAST_DB_PATH}\"/* #suggestion: use screen or tmux to emulate a terminal. The downloads usually takes long. #          tmux: https://tmuxcheatsheet.com/ #          screen: https://kapeli.com/cheat_sheets/screen.docset/Contents/Resources/Documents/index  # download volumes and md5 check files  seq -w 000 150 | parallel wget https://ftp.ncbi.nlm.nih.gov/blast/db/nt.{}.tar.gz -t 0 --show-progress seq -w 000 150 | parallel wget https://ftp.ncbi.nlm.nih.gov/blast/db/nt.{}.tar.gz.md5 -t 0 --show-progress      # where 000 is the first volume and 150, the last (up to now).       ls *5 | parallel md5sum -c {} >> check.txt sort check.txt > check_sort.txt  ls *tar.gz | parallel tar -xvzf {}"},{"path":"https://heronoh.github.io/BLASTr/index.html","id":"formating-a-custom-database","dir":"","previous_headings":"Database configuration","what":"Formating a custom database","title":"Parallel Taxonomic Classification of Metabarcoding Sequences","text":"case prefer, FASTA file can formated BLAST+ database, using BLAST+ script makeblastdb.","code":"#set the path to your fasta file (replace the example below) DB_FILE=\"/data/database/my_db.fasta\"  #check parameters and usage makeblastdb  #format your db makeblastdb -in \"${DB_FILE}\" -dbtype \"nucl\" -parse_seqids -hash_index"},{"path":"https://heronoh.github.io/BLASTr/index.html","id":"testing","dir":"","previous_headings":"","what":"Testing","title":"Parallel Taxonomic Classification of Metabarcoding Sequences","text":"package installation can mock BLAST formatted database provided link. Alternatively, can download unformated mock database (fasta file) format using ncbi-blast+ functionalities, custom database. can obtain fasta . testing, execute following commands R console.","code":"#set the path to your fasta file (replace the example below) DB_FILE=\"/data/database/shortest_minimal_db_BLASTr.fasta\"  #check parameters and usage makeblastdb  #format your db makeblastdb -in \"${DB_FILE}\" -dbtype \"nucl\" -parse_seqids -hash_index library(BLASTr)   #here are 8 ASVs to be tested with the mock blast DB  ASVs_test <- c(   \"CTAGCCATAAACTTAAATGAAGCTATACTAAACTCGTTCGCCAGAGTACTACAAGCGAAAGCTTAAAACTCATAGGACTTGGCGGTGTTTCAGACCCAC\",   \"CTAGCCATAAACTTAAATGAAGCTATACTAAACTCGTTCGCCAGAGTACTACAAGTGAAAGCTTAAAACTCATAGGACTTGGCGGTGTTTCAGACCCAC\",   \"GCCAAATTTGTGTTTTGTCCTTCGTTTTTAGTTAATTGTTACTGGCAAATGACTAACGACAAATGATAAATTACTAATAC\",   \"AACATTGTATTTTGTCTTTGGGGCCTGGGCAGGTGCAGTAGGAACTTCACTTAGAATAATTATTCGTACTGAGCTTGGGCATCCAGGAAGACTTATCGGGGATGATCAAATCTATAATGTAATTGTTACAGCACATGCATTTGTGATAATTTTTTTTATAGTAATACCTATTATGATT\",   \"ACTATACCTATTATTCGGCGCATGAGCTGGAGTCCTAGGCACAGCTCTAAGCCTCCTTATTCGAGCCGAGCTGGGCCAGCCAGGCAACCTTCTAGGTAACGACCACATCTACAACGTTATCGTCACAGCCCATGCATTTGTAATAATCTTCTTCATAGTAATACCCATCATAATCGGAGGCTTTGGCAACTGACTAGTTCCCCTAATAATCGGTGCCCCCGATATG\",   \"TTAGCCATAAACATAAAAGTTCACATAACAAGAACTTTTGCCCGAGAACTACTAGCAACAGCTTAAAACTCAAAGGACTTGGCGGTGCTTTATATCCAC\" )  blast_res <- BLASTr::parallel_blast(   asvs = ASVs_test,                                                 # vector of sequences to be searched   db_path = \"/data/database/shortest_minimal_db_BLASTr.fasta\",      # path to a formated blast database   out_file = NULL,                                                  # path to a .csv file to be created with results (on an existing folder)   out_RDS = NULL,                                                   # path to a .RDS file to be created with results (on an existing folder)   perc_id = 80,                                                     # minimum identity percentual cutoff   perc_qcov_hsp = 80,                                               # minimum percentual coverage of query sequence by subject sequence cutoff   num_threads = 1,                                                  # number of threads/cores to run each blast on   total_cores = 8,                                                  # number of tota threads/cores to alocate all blast searches   num_alignments = 3,                                               # maximum number of alignments/matches to retrieve results for each query sequence   blast_type = \"blastn\"                                             # blast search engine to use )  # check identificaitons results  blast_res  #or  View(blast_res)"},{"path":"https://heronoh.github.io/BLASTr/reference/BLASTr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"BLASTr: Parallel Taxonomic Classification of Metabarcoding Sequences — BLASTr-package","title":"BLASTr: Parallel Taxonomic Classification of Metabarcoding Sequences — BLASTr-package","text":"Seamlessly run BLAST searches within R, tailored ASV (Amplicon Sequence Variant) analysis. package offers robust set functions designed efficiently identify process sequences high-throughput metagenomicmetagenomic experiments, following best practices sequence data analysis.","code":""},{"path":[]},{"path":"https://heronoh.github.io/BLASTr/reference/BLASTr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"BLASTr: Parallel Taxonomic Classification of Metabarcoding Sequences — BLASTr-package","text":"Maintainer: Heron Hilario heronoh@gmail.com (ORCID) Authors: Lucio Queiroz luciorqueiroz@gmail.com (ORCID)","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/check_cmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if a Command is Available and Install if Necessary — check_cmd","title":"Determine if a Command is Available and Install if Necessary — check_cmd","text":"Checks specified command-line tool ('blastn' 'efetch') available system. , creates conda environment installs required tool.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/check_cmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if a Command is Available and Install if Necessary — check_cmd","text":"","code":"check_cmd(   cmd = \"blastn\",   env_name = \"blast-env\",   verbose = \"silent\",   force = FALSE )"},{"path":"https://heronoh.github.io/BLASTr/reference/check_cmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if a Command is Available and Install if Necessary — check_cmd","text":"cmd Character string specifying command-line tool check . Supported commands \"blastn\" \"efetch\". Default \"blastn\". env_name Character string specifying name conda environment create use. Default \"blast-env\". verbose Character string specifying verbosity level environment creation. Options \"silent\", \"verbose\", etc. Default \"silent\". force Logical indicating whether force re-creation conda environment even exists. Default FALSE.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/check_cmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if a Command is Available and Install if Necessary — check_cmd","text":"Invisibly returns TRUE command available successfully installed.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/check_cmd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if a Command is Available and Install if Necessary — check_cmd","text":"","code":"if (FALSE) { # \\dontrun{ # Check if 'blastn' command is available, and install it if not check_cmd(\"blastn\", env_name = \"blast-env\")  # Check if 'efetch' command is available, and install it if not check_cmd(\"efetch\", env_name = \"entrez-env\")  # Force re-creation of the conda environment and re-install 'blastn' check_cmd(\"blastn\", env_name = \"blast-env\", force = TRUE) } # }"},{"path":"https://heronoh.github.io/BLASTr/reference/get_blast_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Run BLASTn — get_blast_results","title":"Run BLASTn — get_blast_results","text":"Retrieve BLAST results given ASV","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/get_blast_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run BLASTn — get_blast_results","text":"","code":"get_blast_results(   asv,   db_path,   num_threads = 1L,   blast_type = \"blastn\",   perc_id = 80L,   perc_qcov_hsp = 80L,   num_alignments = 4L,   verbose = FALSE,   env_name = \"blast-env\" )"},{"path":"https://heronoh.github.io/BLASTr/reference/get_blast_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run BLASTn — get_blast_results","text":"asv Vector sequences BLASTed. db_path Complete path formatted BLAST database. num_threads Number threads run BLAST . Passed BLAST+ argument -num_threads. blast_type One available BLAST+ search engines, #'   one : c(\"blastn\", \"blastp\", \"blastx\", \"tblastn\", \"tblastx\"). perc_id Lowest identity percentage cutoff. Passed BLAST+ -perc_identity. perc_qcov_hsp Lowest query coverage per HSP percentage cutoff. Passed BLAST+ -qcov_hsp_perc. num_alignments Number alignments retrieve BLAST. Max = 6. verbose condathis::run() internal command shown? env_name name conda environment parameter (.e. \"blast-env\")","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/get_blast_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run BLASTn — get_blast_results","text":"tibble results BLASTn sequence.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/get_blast_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run BLASTn — get_blast_results","text":"","code":"if (FALSE) { # \\dontrun{ blast_res <- BLASTr::get_blast_results(   asv = \"CTAGCCATAAACTTAAATGAAGCTATACTAAACTCGTTCGCCAGAGTA   CTACAAGCGAAAGCTTAAAACTCATAGGACTTGGCGGTGTTTCAGACCCAC\",   db_path = \"/data/databases/nt/nt\",   perc_id = 80,   num_thread = 1,   perc_qcov_hsp = 80,   num_alignments = 2 ) } # }"},{"path":"https://heronoh.github.io/BLASTr/reference/get_fasta_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Get header from SubjectID — get_fasta_header","title":"Get header from SubjectID — get_fasta_header","text":"Retrieve complete sequence header BLAST DB based SubjectIDs","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/get_fasta_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get header from SubjectID — get_fasta_header","text":"","code":"get_fasta_header(id, db_path, env_name = \"blast-env\", verbose = FALSE)"},{"path":"https://heronoh.github.io/BLASTr/reference/get_fasta_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get header from SubjectID — get_fasta_header","text":"id SubjectID BLAST results NCBI Nucleotide identifier. db_path Complete path formatted BLAST database. env_name name conda environment parameter (.e. \"blast-env\") verbose condathis::run() internal command shown?","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/get_fasta_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get header from SubjectID — get_fasta_header","text":"Complete identifier SubjectID database.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/get_fasta_header.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get header from SubjectID — get_fasta_header","text":"","code":"if (FALSE) { # \\dontrun{ BLASTr::get_fasta_header(id = \"AP011979.1\", db_path = \"/data/databases/nt/nt\") } # }"},{"path":"https://heronoh.github.io/BLASTr/reference/get_tax_by_taxID.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Taxonomic Ranks Using NCBI Taxonomy Tax IDs — get_tax_by_taxID","title":"Retrieve Taxonomic Ranks Using NCBI Taxonomy Tax IDs — get_tax_by_taxID","text":"Retrieves complete taxonomy information given NCBI Taxonomy Tax IDs querying NCBI database using efetch command.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/get_tax_by_taxID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Taxonomic Ranks Using NCBI Taxonomy Tax IDs — get_tax_by_taxID","text":"","code":"get_tax_by_taxID(   organisms_taxIDs,   parse_result = TRUE,   verbose = FALSE,   env_name = \"entrez-env\" )"},{"path":"https://heronoh.github.io/BLASTr/reference/get_tax_by_taxID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Taxonomic Ranks Using NCBI Taxonomy Tax IDs — get_tax_by_taxID","text":"organisms_taxIDs character vector NCBI Taxonomy Tax IDs retrieve taxonomy information. parse_result Logical indicating whether parse taxonomy information tibble (TRUE, default) return raw output returned efetch (FALSE). verbose Logical indicating whether print verbose messages process. Default FALSE. env_name Character string specifying name conda environment efetch installed. Default \"entrez-env\".","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/get_tax_by_taxID.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Taxonomic Ranks Using NCBI Taxonomy Tax IDs — get_tax_by_taxID","text":"tibble containing taxonomic ranks given Tax IDs.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/get_tax_by_taxID.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Taxonomic Ranks Using NCBI Taxonomy Tax IDs — get_tax_by_taxID","text":"","code":"if (FALSE) { # \\dontrun{ # Retrieve taxonomy for a single Tax ID tax_info <- get_tax_by_taxID(\"9606\") # Human  # Retrieve taxonomy for multiple Tax IDs tax_ids <- c(\"9606\", \"10090\", \"10116\") # Human, Mouse, Rat tax_info <- get_tax_by_taxID(tax_ids)  # Get unparsed taxonomy result raw_tax_info <- get_tax_by_taxID(\"9606\", parse_result = FALSE)  # Enable verbose output tax_info <- get_tax_by_taxID(\"9606\", verbose = TRUE) } # }"},{"path":"https://heronoh.github.io/BLASTr/reference/install_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Install Required Command-line Tool Dependencies — install_dependencies","title":"Install Required Command-line Tool Dependencies — install_dependencies","text":"Installs necessary command-line tools ('blast' 'efetch') conda environments already available. ensures dependencies required package present --date.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/install_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install Required Command-line Tool Dependencies — install_dependencies","text":"","code":"install_dependencies(verbose = \"silent\", force = FALSE)"},{"path":"https://heronoh.github.io/BLASTr/reference/install_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install Required Command-line Tool Dependencies — install_dependencies","text":"verbose character string specifying verbosity level environment creation. Options include \"silent\", \"output\", \"full\" etc. Default \"silent\". force logical value indicating whether force re-creation Conda environments even already exist. Default FALSE.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/install_dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install Required Command-line Tool Dependencies — install_dependencies","text":"Invisibly returns TRUE attempting install dependencies.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/install_dependencies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install Required Command-line Tool Dependencies — install_dependencies","text":"","code":"if (FALSE) { # \\dontrun{ # Install dependencies with default settings install_dependencies()  # Install dependencies with verbose output install_dependencies(verbose = \"verbose\")  # Force re-installation of dependencies install_dependencies(force = TRUE) } # }"},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_blast.html","id":null,"dir":"Reference","previous_headings":"","what":"Run BLAST on parallel — parallel_blast","title":"Run BLAST on parallel — parallel_blast","text":"Run parallel BLAST set sequences","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_blast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run BLAST on parallel — parallel_blast","text":"","code":"parallel_blast(   asvs,   db_path,   out_file = NULL,   out_RDS = NULL,   num_threads = 1L,   blast_type = \"blastn\",   total_cores = 1L,   perc_id = 80L,   perc_qcov_hsp = 80L,   num_alignments = 4L,   verbose = FALSE,   env_name = \"blast-env\" )"},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_blast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run BLAST on parallel — parallel_blast","text":"asvs Character vector sequences db_path Complete path formatted BLAST database. out_file Complete path output .csv file existing folder. out_RDS Complete path output RDS file existing folder. num_threads Number threads run BLAST . Passed BLAST+ argument -num_threads. blast_type BLAST+ executable used search. total_cores Total available cores run BLAST parallel. Check max future::availableCores() perc_id Lowest identity percentage cutoff. Passed BLAST+ -perc_identity. perc_qcov_hsp Lowest query coverage per HSP percentage cutoff. Passed BLAST+ -qcov_hsp_perc. num_alignments Number alignments retrieve BLAST. Max = 6. verbose condathis::run() internal command shown? env_name name conda environment parameter (.e. \"blast-env\")","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_blast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run BLAST on parallel — parallel_blast","text":"tibble BLAST tabular output.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_blast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run BLAST on parallel — parallel_blast","text":"","code":"if (FALSE) { # \\dontrun{ blast_res <- BLASTr::parallel_blast(   asvs = ASVs_test, # vector of sequences to be searched   db_path = \"/data/databases/nt/nt\", # path to a formatted blast database   out_file = NULL, # path to a .csv file to be created with results (on an existing folder)   out_RDS = NULL, # path to a .RDS file to be created with results (on an existing folder)   perc_id = 80, # minimum identity percentage cutoff   perc_qcov_hsp = 80, # minimum percentage coverage of query sequence by subject sequence cutoff   num_threads = 1, # number of threads/cores to run each blast on   total_cores = 8, # number of total threads/cores to allocate all blast searches   # maximum number of alignments/matches to retrieve results for each query sequence   num_alignments = 3,   blast_type = \"blastn\" # blast search engine to use ) } # }"},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_get_tax.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Taxonomic Ranks for a List of NCBI Taxonomy Tax IDs in Parallel — parallel_get_tax","title":"Retrieve Taxonomic Ranks for a List of NCBI Taxonomy Tax IDs in Parallel — parallel_get_tax","text":"Retrieves taxonomy ranks list NCBI Taxonomy Tax IDs using parallel processing. function queries NCBI database can retry fetching taxonomy information multiple times initial attempts fail.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_get_tax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Taxonomic Ranks for a List of NCBI Taxonomy Tax IDs in Parallel — parallel_get_tax","text":"","code":"parallel_get_tax(   organisms_taxIDs,   parse_result = TRUE,   total_cores = 1,   retry_times = 10,   verbose = FALSE,   env_name = \"entrez-env\" )"},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_get_tax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Taxonomic Ranks for a List of NCBI Taxonomy Tax IDs in Parallel — parallel_get_tax","text":"organisms_taxIDs character vector NCBI Taxonomy Tax IDs retrieve taxonomy information . parse_result Logical indicating whether parse taxonomy information tibble (TRUE, default) return raw output returned efetch (FALSE). total_cores Integer specifying number cores use parallel processing. Defaults 1. retry_times Integer specifying number times retry fetching taxonomy information fails. Defaults 10. verbose Logical indicating whether print verbose messages process. Default FALSE. env_name Character string specifying name conda environment efetch installed. Default \"entrez-env\".","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_get_tax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Taxonomic Ranks for a List of NCBI Taxonomy Tax IDs in Parallel — parallel_get_tax","text":"tibble containing taxonomic ranks given Tax IDs.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/parallel_get_tax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Taxonomic Ranks for a List of NCBI Taxonomy Tax IDs in Parallel — parallel_get_tax","text":"","code":"if (FALSE) { # \\dontrun{ # Retrieve taxonomy for multiple Tax IDs using 4 cores tax_ids <- c(\"9606\", \"10090\", \"10116\") # Human, Mouse, Rat tax_info <- parallel_get_tax(tax_ids, total_cores = 4)  # Retrieve unparsed taxonomy result tax_info_unparsed <- parallel_get_tax(tax_ids, parse_result = FALSE)  # Increase the number of retry attempts tax_info <- parallel_get_tax(tax_ids, retry_times = 20)  # Enable verbose output tax_info <- parallel_get_tax(tax_ids, verbose = TRUE) } # }"},{"path":"https://heronoh.github.io/BLASTr/reference/parse_fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Parsing fasta file to sequences only — parse_fasta","title":"Parsing fasta file to sequences only — parse_fasta","text":"Extract sequences FASTA file","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/parse_fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parsing fasta file to sequences only — parse_fasta","text":"","code":"parse_fasta(file_path)"},{"path":"https://heronoh.github.io/BLASTr/reference/parse_fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parsing fasta file to sequences only — parse_fasta","text":"file_path Path FASTA file.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/parse_fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parsing fasta file to sequences only — parse_fasta","text":"vector containing sequences.","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/run_blast.html","id":null,"dir":"Reference","previous_headings":"","what":"Run BLAST — run_blast","title":"Run BLAST — run_blast","text":"Run BLAST single sequence return raw results. formatted results, use function BLASTr::get_blastn_results()","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/run_blast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run BLAST — run_blast","text":"","code":"run_blast(   asv,   db_path,   num_alignments = 4L,   num_threads = 1L,   blast_type = \"blastn\",   perc_id = 80L,   perc_qcov_hsp = 80L,   verbose = FALSE,   env_name = \"blast-env\" )"},{"path":"https://heronoh.github.io/BLASTr/reference/run_blast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run BLAST — run_blast","text":"asv Vector sequences BLASTed. db_path Complete path formatted BLAST database. num_alignments Number alignments retrieve BLAST. Max = 6. num_threads Number threads run BLAST . Passed BLAST+ argument -num_threads. blast_type One available BLAST+ search engines, #'   one : c(\"blastn\", \"blastp\", \"blastx\", \"tblastn\", \"tblastx\"). perc_id Lowest identity percentage cutoff. Passed BLAST+ -perc_identity. perc_qcov_hsp Lowest query coverage per HSP percentage cutoff. Passed BLAST+ -qcov_hsp_perc. verbose condathis::run() internal command shown? env_name name conda environment parameter (.e. \"blast-env\")","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/run_blast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run BLAST — run_blast","text":"Unformatted BLAST results. results formatted tibble, please use BLASTr::get_blast_results()","code":""},{"path":"https://heronoh.github.io/BLASTr/reference/run_blast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run BLAST — run_blast","text":"","code":"if (FALSE) { # \\dontrun{ blast_res <- run_blast(   asv = \"CTAGCCATAAACTTAAATGAAGCTATACTAAACTCGTTCGCCAG     AGTACTACAAGCGAAAGCTTAAAACTCATAGGACTTGGCGGTGTTTCAGACCCAC\",   db_path = fs::path_package(\"BLASTr\", \"extdata\", \"minimal_db_blast\", ext = \"fasta\"),   perc_id = 80,   num_thread = 1,   perc_qcov_hsp = 80,   num_alignments = 2 ) } # }"},{"path":"https://heronoh.github.io/BLASTr/news/index.html","id":"blastr-013","dir":"Changelog","previous_headings":"","what":"BLASTr 0.1.3","title":"BLASTr 0.1.3","text":"Refactor handling internal errors. shell_exec available anymore.","code":""},{"path":"https://heronoh.github.io/BLASTr/news/index.html","id":"blastr-012","dir":"Changelog","previous_headings":"","what":"BLASTr 0.1.2","title":"BLASTr 0.1.2","text":"New install_dependencies() automatically create environments. Initial support condathis managing dependency installation.","code":""}]
